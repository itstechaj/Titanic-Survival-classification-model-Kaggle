# -*- coding: utf-8 -*-
"""titanic_kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GrdZ0IsRFsLkjDNAymmK3GB-Xf737zMi
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler

# function to modify and clean dataframe
def preProcessing(orgDf):
  df=orgDf.drop(["PassengerId","Name","Ticket","Fare","Cabin"],axis=1) #drop these columns
  df=df.drop(np.where(df['Embarked'].isna())[0],axis=0) #drop the rows where the value of Embarked is NaN
  df['Sex']=df['Sex'].replace(['male','female'],[0,1]) # convert sex column into 0 and 1
  df['Age']=df['Age'].fillna(df['Age'].mean()) # replace NaN values in Age with its sd
  df['Age']=df['Age'].astype(int) #convert age column into integer
  # label encoding the Embarked column
  lbl_encoder = preprocessing.LabelEncoder()
  lbl_encoder.fit(df['Embarked'])
  df['Embarked']=lbl_encoder.transform(df['Embarked'])
  return df #return the processed dataframe

# this function will return np array with tranformed values
def scale(x):
  sclr=StandardScaler()
  return sclr.fit_transform(x)

orgDf=pd.read_csv("/content/train_titanic.csv")
# orgCols=orgDf.columns
# orgCols=np.delete(orgCols,[0,3,8,9,10])

df=preProcessing(orgDf)
#convert df into dataframe using originals columns name
# df=pd.DataFrame(df,columns=orgCols)

# for practice
# splitting the data int0 4:1 ratio
# df_train,df_test=train_test_split(df,test_size=0.2,random_state=42)
#defining features and labels
# x_train,y_train=df_train.drop(['Survived'],axis=1),df_train['Survived']
# x_test,y_test=df_test.drop(['Survived'],axis=1),df_test['Survived']

#applying standard scalar on x train and x test
# x_train=scale(x_train)
# x_test=scale(x_test)

# for final run
x_train,y_train=df.drop(['Survived'],axis=1),df['Survived']
x_train=scale(x_train)

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

# y_train.head()

mymodel=LogisticRegression(random_state=0).fit(x_train,y_train)
dc_model=DecisionTreeClassifier(random_state=0).fit(x_train,y_train)
rf_model=RandomForestClassifier(random_state=0).fit(x_train,y_train)
kn_model=KNeighborsClassifier(n_neighbors=6).fit(x_train,y_train)

# load test_data
test_data=pd.read_csv("/content/test.csv")
#passenger id
pid=pd.DataFrame(test_data['PassengerId'])
#cleaning test data
test_data=preProcessing(test_data)
#scale test data
test_data=scale(test_data)

test_result=rf_model.predict(test_data)

pid['Survived']=test_result

pid.to_csv("result.csv",index=False)

# print(f"LR : {mymodel.score(x_test,y_test)}")
# print(f"DC : {dc_model.score(x_test,y_test)}")
# print(f"RF : {rf_model.score(x_test,y_test)}")
# print(f"KN : {kn_model.score(x_test,y_test)}")

pid.shape

